/*
 * generated by Xtext
 */
package br.usp.icmc.amenu.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import br.usp.icmc.amenu.aMenu.Menu

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class AMenuGenerator implements IGenerator {
	
	private MenuAbstract _menu
	
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		
		var menu = resource.contents.head as Menu
		this._menu = new Dropdown(menu)
		
		fsa.generateFile(resource.className+".html", this._menu.genHtml)
	}
	
	def genCode(Resource resource){
		
		var menu = resource.contents.head as Menu
		switch menu.type.toString {
		  case 'dropdown' : this._menu = new Dropdown(menu)
		  case 'flyout' : this._menu = new Flyout(menu)
		  case 'accordion' : this._menu = new Accordion(menu)
		  default : throw new IllegalArgumentException('Invalid type menu!')
		}
		
	}
	
	def String getCode(String type){
		switch type {
		  case 'css' : return this._menu.genCss.toString
		  case 'html' : return this._menu.genHtml.toString
		  case 'js' : return this._menu.genJavascript.toString
		  default : return ""
		}
	}
	
	def className(Resource res) {
        var name = res.URI.lastSegment
        return name.substring(0, name.indexOf('.'))
    }
    
}
